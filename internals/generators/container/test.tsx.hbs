import React from 'react'
import { compose } from 'redux'
import { Provider } from 'react-redux'
import { createMemoryHistory } from 'history'
import { render } from '@testing-library/react'
{{#if wantMessages}}
import { IntlProvider } from 'react-intl'
{{/if}}

// Import de Theme Provider
import { ThemeProvider } from 'styled-components'
import Theme from 'common/Theme'

import configureStore from 'utils/configureStore'
{{#if wantMessages}}
import { DEFAULT_LOCALE } from 'utils/locales'
{{/if}}

import {{ properCase name }}, { withConnect } from '../{{ properCase name }}'

describe('<{{ properCase name }} />', () => {
  const history = createMemoryHistory()
  const store = configureStore({}, history)

  const ComponentWithCompose = compose(
    withConnect,
  )({{ properCase name }})

  const renderComponent = (props = {}) => (
    render(
{{#if wantActionsAndReducer}}
{{#if wantMessages}}
      <IntlProvider locale={DEFAULT_LOCALE}>
        <Provider store={store}>
          <ThemeProvider theme={Theme}>
            <ComponentWithCompose {...props} />
          </ThemeProvider>
        </Provider>
      </IntlProvider>,
{{else}}
      <Provider store={store}>
        <ThemeProvider theme={Theme}>
          <ComponentWithCompose {...props} />
        </ThemeProvider>
      </Provider>,
{{/if}}
{{else}}
{{#if wantMessages}}
      <IntlProvider locale={DEFAULT_LOCALE}>
        <ThemeProvider theme={Theme}>
          <ComponentWithCompose {...props} />
        </ThemeProvider>
      </IntlProvider>,
{{else}}
      <ThemeProvider theme={Theme}>
        <ComponentWithCompose {...props} />
      </ThemeProvider>,
{{/if}}
{{/if}}
    )
  )

  it('Expect to not log errors in console', () => {
    const spy = jest.spyOn(global.console, 'error')

    renderComponent()

    expect(spy).not.toHaveBeenCalled()
  })

  it('Expect to have additional unit tests specified', () => {
    expect(true).toEqual(false)
  })

  /**
   * Unskip this test to use it
   *
   * @see {@link https://jestjs.io/docs/en/api#testskipname-fn}
   */
  it.skip('Should render and match the snapshot', () => {
    const {
      container: { firstChild },
    } = renderComponent()

    expect(firstChild).toMatchSnapshot()
  })
})
